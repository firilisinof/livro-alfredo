{
  "hash": "0e90158958318bcc09f5103046437748",
  "result": {
    "engine": "julia",
    "markdown": "---\nengine: julia\n---\n\n\n\n\n# Aula de exercícios sobre Strings\n\nNesta aula, vamos explorar funções que manipulam strings e criar testes para verificar sua correção. Em algumas funções, vamos notar que há diversas formas de se obter o mesmo resultado\n\n## 1. Concatenação de letras\n\nA primeira função `concatena` concatena as primeiras duas e as últimas duas letras de uma string.\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction concatena(s::String)::String\n    if length(s) < 2\n        return \"Erro: tamanho da string menor do que 2\"\n    end\n    resposta = s[1:2]*s[end-1:end]\n    return resposta\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nconcatena (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n\nAwui utulizamos `s[1:2]` para obter as duas primeiras letras de s, que é uma forma mais concisa de acessar mais de um índice de um objeto. Alternativamente, poderíamos acessar esses dois índices separadamente com o comando `s[1]*s[2]`.\n\nPara verificar se a função está funcionando corretamente, podemos utilizar o seguinte teste:\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing Test\n\nfunction testeConcatena()\n  @test concatena(\"Ola Bom Dia\") == \"Olia\"\n  @test concatena(\"oi\") == \"oioi\"\n  @test concatena(\"tre\") == \"trre\"\n  @test concatena(\"a\") == \"Erro: tamanho da string menor do que 2\"\n  @test concatena(\"a123\") == \"a123\"\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntesteConcatena (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n\n## 2. Inversão de String \n\nDevemos criar uma função que interte uma string, retornando os caracteres na ordem reversa.\n\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nfunction inverte(s::String)::String\n    # Inicializamos uma string vazia\n    inversa=\"\"\n\n    # Intervalo de lenght(s) até 1, a passos de -1\n    for i in length(s):-1:1\n        # Concatena cada caractere na ordem inversa\n        inversa*=s[i]\n    end\n\n    return inversa\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ninverte (generic function with 1 method)\n```\n:::\n:::\n\n\n\n\n\n\nPara obter o resultado que desejamos, fazemos um laço `for` que itera do último índice da string, representado por `length(s)`, até o primeiro, concatenando os caracteres nessa ordem na string de retorno. \nO laço é configurado para decrementar o índice a cada iteração, especificando -1 como passo. Isso nos permite acessar cada caractere da string de trás para frente. E em cada iteração, concatenamos o caractere atual, `s[i]`, à string `inversa`. Dessa forma, os caracteres são adicionados na ordem inversa.\n\n",
    "supporting": [
      "17_files"
    ],
    "filters": []
  }
}